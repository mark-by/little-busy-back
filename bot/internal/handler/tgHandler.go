package handler

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/mark-by/little-busy-back/bot/internal/crmClient"
	"github.com/mark-by/little-busy-back/bot/internal/entity"
	"github.com/mark-by/little-busy-back/bot/internal/storage"
	"github.com/nleeper/goment"
	"log"
)

var (
	CommandEvents               = "–ë–ª–∏–∂–∞–π—à–∏–µ —Å–µ–∞–Ω—Å—ã"
	CommandTurnOnNotifications  = "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
	CommandTurnOffNotifications = "–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

	errorMessage = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üßê"
)

type TgHandler struct {
	crm     crmClient.CrmClient
	storage storage.UserStorage
}

func NewTgHandler(crm crmClient.CrmClient, userStorage storage.UserStorage) *TgHandler {
	return &TgHandler{
		crm:     crm,
		storage: userStorage,
	}
}

func (t TgHandler) Start(incomeMessage *tgbotapi.Message) tgbotapi.MessageConfig {
	newMessage := tgbotapi.NewMessage(incomeMessage.Chat.ID,
		fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s!"+
			"\n–Ø –ø–æ–º–æ—â–Ω–∏–∫ –º–∞—Å—Å–∞–∂–∏—Å—Ç–∞ –ò—Ä–∏–Ω—ã –ë—ã—Ö–æ–≤–µ—Ü. "+
			"–Ø –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–µ–∞–Ω—Å–∞—Ö –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å, –∫–∞–∫–∏–µ —Å–µ–∞–Ω—Å—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã."+
			"\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ \"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\"", incomeMessage.From.FirstName))

	newMessage.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonContact("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
		),
	)

	return newMessage
}

func (t TgHandler) Contact(incomeMessage *tgbotapi.Message) tgbotapi.MessageConfig {
	phoneNumber := incomeMessage.Contact.PhoneNumber[1:]
	user, err := t.crm.GetUser(phoneNumber)
	if err != nil {
		log.Println("fail to get contact: ", err)
		return tgbotapi.NewMessage(incomeMessage.Chat.ID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –∑–Ω–∞–∫–æ–º—ã –∏–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ò—Ä–∏–Ω–µ üßê")
	}

	user.ChatID = incomeMessage.Chat.ID
	err = t.storage.SaveUser(user)
	if err != nil {
		log.Println("err: fail to save: ", err)
		return tgbotapi.NewMessage(incomeMessage.Chat.ID, errorMessage)
	}

	msg := tgbotapi.NewMessage(incomeMessage.Chat.ID, fmt.Sprintf(
		"–û—Ç–ª–∏—á–Ω–æ! –ú—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å!"+
			"\n–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –≤–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–µ–∞–Ω—Å—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏—è—Ö."+
			"\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."))

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(CommandEvents),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(CommandTurnOnNotifications),
		),
	)

	return msg
}

func (t TgHandler) renderEventsMessage(events []entity.Event) string {
	if len(events) == 0 {
		return "–í –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü —Å–µ–∞–Ω—Å–æ–≤ –Ω–µ—Ç"
	}
	result := "–ë–ª–∏–∂–∞–π—à–∏–µ —Å–µ–∞–Ω—Å—ã:"
	goment.SetLocale("ru")
	for _, event := range events {
		g1, _ := goment.New(event.StartTime)
		g2, _ := goment.New(event.EndTime)
		result += fmt.Sprintf("\n%s –¥–æ %s", g1.Format("Do –≤ H:mm"), g2.Format("H:mm, MMMM, ddd"))
	}
	return result
}

func (t TgHandler) ShowEvents(incomeMessage *tgbotapi.Message) tgbotapi.MessageConfig {
	user, err := t.storage.UserByChatID(incomeMessage.Chat.ID)
	if err != nil {
		log.Println("err: fail to get user ", incomeMessage.Chat.ID, errorMessage)
		return tgbotapi.NewMessage(incomeMessage.Chat.ID, errorMessage)
	}
	events, err := t.crm.GetFutureEventsForCustomer(user.Tel)
	if err != nil {
		log.Println("err: fail to get events ", errorMessage)
		return tgbotapi.NewMessage(incomeMessage.Chat.ID, errorMessage)
	}
	msg := tgbotapi.NewMessage(incomeMessage.Chat.ID, t.renderEventsMessage(events))

	toggleNotify := CommandTurnOnNotifications
	if user.NotificationIsEnabled {
		toggleNotify = CommandTurnOffNotifications
	}

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(CommandEvents),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(toggleNotify),
		),
	)

	return msg
}

func (t TgHandler) EnableNotifications(incomeMessage *tgbotapi.Message) tgbotapi.MessageConfig {
	var turnOnNotification bool
	switch incomeMessage.Text {
	case CommandTurnOnNotifications:
		turnOnNotification = true
	case CommandTurnOffNotifications:
		turnOnNotification = false
	default:
		turnOnNotification = false
	}

	err := t.storage.SetNotification(incomeMessage.Chat.ID, turnOnNotification)
	if err != nil {
		log.Println("fail to set notification", err)
		return tgbotapi.NewMessage(incomeMessage.Chat.ID, errorMessage)
	}

	msg := tgbotapi.NewMessage(incomeMessage.Chat.ID, "–°–¥–µ–ª–∞–Ω–æ!")

	toggleNotify := CommandTurnOnNotifications
	if turnOnNotification {
		msg.Text = "–°–¥–µ–ª–∞–Ω–æ!\n–ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ —Å–µ–∞–Ω—Å–∞ –≤ 18:00"
		toggleNotify = CommandTurnOffNotifications
	}

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(CommandEvents),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(toggleNotify),
		),
	)

	return msg
}

var _ Handler = &TgHandler{}
