// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: crm/pkg/proto/crm/crm.proto

package crm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrmServiceClient is the client API for CrmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrmServiceClient interface {
	GetUserByID(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*User, error)
	CheckCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*User, error)
	CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	DeleteCustomer(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*Empty, error)
	SearchCustomer(ctx context.Context, in *SearchFilter, opts ...grpc.CallOption) (*Customers, error)
	GetCustomer(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*Customer, error)
	GetCustomers(ctx context.Context, in *CustomersRequest, opts ...grpc.CallOption) (*Customers, error)
	UpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Empty, error)
}

type crmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrmServiceClient(cc grpc.ClientConnInterface) CrmServiceClient {
	return &crmServiceClient{cc}
}

func (c *crmServiceClient) GetUserByID(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/crm.CrmService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) CreateUser(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/crm.CrmService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) CheckCredentials(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/crm.CrmService/CheckCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/crm.CrmService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) DeleteCustomer(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/crm.CrmService/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) SearchCustomer(ctx context.Context, in *SearchFilter, opts ...grpc.CallOption) (*Customers, error) {
	out := new(Customers)
	err := c.cc.Invoke(ctx, "/crm.CrmService/SearchCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetCustomer(ctx context.Context, in *CustomerID, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/crm.CrmService/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) GetCustomers(ctx context.Context, in *CustomersRequest, opts ...grpc.CallOption) (*Customers, error) {
	out := new(Customers)
	err := c.cc.Invoke(ctx, "/crm.CrmService/GetCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmServiceClient) UpdateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/crm.CrmService/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrmServiceServer is the server API for CrmService service.
// All implementations should embed UnimplementedCrmServiceServer
// for forward compatibility
type CrmServiceServer interface {
	GetUserByID(context.Context, *User) (*User, error)
	CreateUser(context.Context, *Credentials) (*User, error)
	CheckCredentials(context.Context, *Credentials) (*User, error)
	CreateCustomer(context.Context, *Customer) (*Customer, error)
	DeleteCustomer(context.Context, *CustomerID) (*Empty, error)
	SearchCustomer(context.Context, *SearchFilter) (*Customers, error)
	GetCustomer(context.Context, *CustomerID) (*Customer, error)
	GetCustomers(context.Context, *CustomersRequest) (*Customers, error)
	UpdateCustomer(context.Context, *Customer) (*Empty, error)
}

// UnimplementedCrmServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCrmServiceServer struct {
}

func (UnimplementedCrmServiceServer) GetUserByID(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedCrmServiceServer) CreateUser(context.Context, *Credentials) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCrmServiceServer) CheckCredentials(context.Context, *Credentials) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCredentials not implemented")
}
func (UnimplementedCrmServiceServer) CreateCustomer(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCrmServiceServer) DeleteCustomer(context.Context, *CustomerID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedCrmServiceServer) SearchCustomer(context.Context, *SearchFilter) (*Customers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCustomer not implemented")
}
func (UnimplementedCrmServiceServer) GetCustomer(context.Context, *CustomerID) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedCrmServiceServer) GetCustomers(context.Context, *CustomersRequest) (*Customers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomers not implemented")
}
func (UnimplementedCrmServiceServer) UpdateCustomer(context.Context, *Customer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}

// UnsafeCrmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrmServiceServer will
// result in compilation errors.
type UnsafeCrmServiceServer interface {
	mustEmbedUnimplementedCrmServiceServer()
}

func RegisterCrmServiceServer(s grpc.ServiceRegistrar, srv CrmServiceServer) {
	s.RegisterService(&CrmService_ServiceDesc, srv)
}

func _CrmService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm.CrmService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetUserByID(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm.CrmService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).CreateUser(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_CheckCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).CheckCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm.CrmService/CheckCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).CheckCredentials(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm.CrmService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).CreateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm.CrmService/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).DeleteCustomer(ctx, req.(*CustomerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_SearchCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).SearchCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm.CrmService/SearchCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).SearchCustomer(ctx, req.(*SearchFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm.CrmService/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetCustomer(ctx, req.(*CustomerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_GetCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).GetCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm.CrmService/GetCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).GetCustomers(ctx, req.(*CustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrmService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crm.CrmService/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServiceServer).UpdateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

// CrmService_ServiceDesc is the grpc.ServiceDesc for CrmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crm.CrmService",
	HandlerType: (*CrmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByID",
			Handler:    _CrmService_GetUserByID_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _CrmService_CreateUser_Handler,
		},
		{
			MethodName: "CheckCredentials",
			Handler:    _CrmService_CheckCredentials_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _CrmService_CreateCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _CrmService_DeleteCustomer_Handler,
		},
		{
			MethodName: "SearchCustomer",
			Handler:    _CrmService_SearchCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _CrmService_GetCustomer_Handler,
		},
		{
			MethodName: "GetCustomers",
			Handler:    _CrmService_GetCustomers_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CrmService_UpdateCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crm/pkg/proto/crm/crm.proto",
}
